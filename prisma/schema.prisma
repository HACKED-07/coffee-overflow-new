// Green Hydrogen Credit System - Prisma Schema
// This schema defines the database structure for the blockchain-based credit system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @db.VarChar(50)
  walletAddress String    @unique @map("wallet_address") @db.VarChar(42)
  name          String    @db.VarChar(100)
  email         String?   @unique @db.VarChar(255)
  role          UserRole
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  facilities        Facility[]
  producedCredits   Credit[]    @relation("ProducerCredits")
  validatedCredits  Credit[]    @relation("ValidatorCredits")
  ownedCredits      Credit[]    @relation("OwnerCredits")
  sentTransactions  Transaction[] @relation("FromUser")
  receivedTransactions Transaction[] @relation("ToUser")
  validationRequests ValidationRequest[]
  marketplaceListings MarketplaceListing[]

  @@map("users")
}

model Facility {
  id              String         @id @db.VarChar(50)
  name            String         @db.VarChar(200)
  location        String         @db.VarChar(255)
  renewableSource RenewableSource @map("renewable_source")
  capacity        Decimal        @db.Decimal(10, 2)
  producerId      String         @map("producer_id") @db.VarChar(50)
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  producer User     @relation(fields: [producerId], references: [id])
  credits Credit[]

  @@map("facilities")
}

model Credit {
  id                    String   @id @default(cuid())
  amount                Float
  renewableSource       String
  productionDate        DateTime
  producerId            String
  facilityId            String
  isValidated           Boolean  @default(false)
  validatedBy           String?
  validatedAt           DateTime?
  isRetired             Boolean  @default(false)
  ownerId               String
  price                 Float
  createdAt             DateTime  @default(now())
  status                String   @default("pending") // pending, issued, retired
  description           String?
  supportingDocuments   String?
  blockchainId          Int?     // Changed from String to Int to store actual credit ID from blockchain
  
  // Relations
  facility              Facility @relation(fields: [facilityId], references: [id])
  producer              User     @relation("ProducerCredits", fields: [producerId], references: [id])
  validator             User?    @relation("ValidatorCredits", fields: [validatedBy], references: [id])
  owner                 User     @relation("OwnerCredits", fields: [ownerId], references: [id])
  transactions          Transaction[]
  validationRequests    ValidationRequest[]
  marketplaceListings   MarketplaceListing[]
  
  @@map("credits")
}

model Transaction {
  id              String           @id @default(cuid())
  transactionHash String?          @unique @map("transaction_hash") @db.VarChar(66)
  creditId        String           @map("credit_id")
  fromUserId      String           @map("from_user_id") @db.VarChar(50)
  toUserId        String           @map("to_user_id") @db.VarChar(50)
  amount          Decimal          @db.Decimal(10, 2)
  pricePerUnit    Decimal          @map("price_per_unit") @db.Decimal(10, 6)
  totalPrice      Decimal          @map("total_price") @db.Decimal(10, 6)
  transactionType TransactionType  @map("transaction_type")
  status          TransactionStatus @default(pending)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  credit    Credit @relation(fields: [creditId], references: [id])
  fromUser  User   @relation("FromUser", fields: [fromUserId], references: [id])
  toUser    User   @relation("ToUser", fields: [toUserId], references: [id])

  @@map("transactions")
}

model ValidationRequest {
  id           String   @id @default(cuid())
  creditId     String   @map("credit_id")
  validatorId  String   @map("validator_id") @db.VarChar(50)
  status       String   @default("pending") @db.VarChar(20)
  comments     String?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  credit    Credit @relation(fields: [creditId], references: [id])
  validator User   @relation(fields: [validatorId], references: [id])

  @@map("validation_requests")
}

model MarketplaceListing {
  id            String   @id @default(cuid())
  creditId      String   @map("credit_id")
  sellerId      String   @map("seller_id") @db.VarChar(50)
  pricePerUnit  Decimal  @map("price_per_unit") @db.Decimal(10, 6)
  totalAmount   Decimal  @map("total_amount") @db.Decimal(10, 2)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  credit Credit @relation(fields: [creditId], references: [id])
  seller User   @relation(fields: [sellerId], references: [id])

  @@map("marketplace_listings")
}

// Enums
enum UserRole {
  producer
  validator
  buyer
}

enum RenewableSource {
  Solar
  Wind
  Hydro
  Geothermal
}

enum CreditStatus {
  pending
  validated
  issued
  retired
}

enum TransactionType {
  transfer
  purchase
  retirement
}

enum TransactionStatus {
  pending
  confirmed
  failed
}
